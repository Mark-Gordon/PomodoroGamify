@using Microsoft.AspNet.Identity;
@model PomodoroGamify.Models.UserModel
@Scripts.Render("~/Scripts/MyScripts/timer.js")
@{
    ViewBag.Title = "Home Page";
}
<div id="emptyPadding"></div>
@{ }
<div class="container">
    <div class="row">
        <div id="alertBox" style="display: none;" class="alert alert-success alert-dismissible fade in">
            <a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>
            <text id="text1"><strong>Success!</strong> This alert box could indicate a successful or positive action.</text>
        </div>
        <div id="TimerAndControlsDiv" class="col-lg-5" style="text-align:center;">
            <div id="countdownDiv">
                <text id="time">25:00</text>
            </div>
            <div id="TimeControllerDiv">
                <button id="timerStartBtn" class="btn btn-primary" onclick="startTimer(60 * 0.04, $('#time'));">Start Timer</button>
                <button id="timerStopBtn" class="btn btn-primary" disabled="disabled" onclick="stopTimer();">Stop Timer</button>
            </div>
        </div>
        <div id="chart-area" class="col-lg-5 style=" text-align:center;"">
            <div id="progress"
                 data-level=@Model.Level
                 data-experienceToLevelUp=@Model.GetExperienceToLevelUp() style="text-align:center;">
            </div>
        </div>
    </div>
     <div class="row">
         <div class="col-lg-6">
               <h2>Quests</h2>
               <ul id="quests" class="list-group">
                   <!--<li id="quest3" onclick="listSelected($('#quest3'));" value=3 class="list-group-item d-flex justify-content-between align-items-center">
    Morbi leo risus
    <span id=100>1</span>
                   </li>-->
               </ul>
         </div>
    </div>
</div>
@section scripts
{
    <script>
   var level = @Model.Level;
   var totalExperience = @Model.Experience;
   var percentage = @Model.getPercentageToLevel();
   var experienceToLevelUp = @Model.GetExperienceToLevelUp();
   var currentPercentage = percentage;
   var questID = [];

   var timer;


        getQuests();

        var quests;
   function getQuests() {



        $.ajax({
            url: "/Home/GetQuests",
            method: "GET",
            success: function (data) {
                quests = data;
                loadQuests();
            }
       });


       return true;

   }
   var idValues = []

    function loadQuests() {

        for (var i = 0; i < quests.length; i++) {
            var ul = document.getElementById("quests");
            var li = document.createElement("li");
            li.append(document.createTextNode(quests[i][2]));
            li.id = quests[i][1];
            var val = quests[i][1];
            idValues.push("#" + val);

            li.onclick = (function (i) {
                return function () { listSelected($("#Quest" + (i+1))) };
        }) (i);
            li.value = quests[i][6];
            li.className = "list-group-item d-flex justify-content-between align-items-center";
            var span = document.createElement("span");
            span.innerText = "hello";
            span.id = parseInt(quests[i][3]);
            span.value = quests[i][4];
            li.appendChild(span);
            ul.appendChild(li);
        }

        checkQuestsUnlocked();

        }



   function checkQuestsUnlocked() {




       var ul = document.getElementById("quests");
                var items = ul.getElementsByTagName("span");




       for (var i = 0; i < items.length; ++i) {


           if (items[i].id <= level) {
               $("#" + items[i].id).removeClass("btn-danger badge");
               $("#" + items[i].id).addClass("badge badge-primary badge-pill");
               var progress = document.getElementById(items[i].id).parentElement.value;
               document.getElementById(items[i].id).innerHTML = progress + "/" + items[i].value + " completed";

           } else {
               $("#" + items[i].id).addClass("btn-danger badge");
               document.getElementById(items[i].id).innerHTML = "Locked unti level " + items[i].id;
           }
       }

    }


    var selectedQuestId = "";


        function listSelected(display) {


       selectedQuestId = display[0].id;


       if (display.hasClass("active")) {
           display.removeClass("active");
           selectedQuestId = "";
           return;
       }

       var ul = document.getElementById("quests");
       var items = ul.getElementsByTagName("li");

       for (var i = 0; i < items.length; ++i) {

           $("#" + items[i].id).removeClass("active");
       }
       display.addClass("active");
   }



   function updateExperience() {

       @{
          Model.Experience = Model.Experience + 25;
       }
   }


   function updateQuest(questID) {

            if (questID == "")
                return;


            alert(questID);

        $.ajax({
             url: "/Home/UpdateQuest",
            method: "POST",
            data: { questName: questID },
            success: function (data) {
                alert("success!!");
            }
        }); 

   }


   function pomodoroCompleted() {

       $.ajax({
       url: "/Home/AjaxGet",
       method: "GET",
       success: function (data) {
           var oldPercentage = currentPercentage;


           level = data.Level;
           totalExperience = data.Experience;
           percentage = data.PercentageToLevel;
           experienceToLevelUp = data.ExperienceToLevelUp
           currentPercentage = percentage;

           checkQuestsUnlocked();
           handleHappyRating();
           handleEffectiveRating();
           updateQuest(selectedQuestId);



           if (percentage < oldPercentage) {
               percentage = percentage + (100 - oldPercentage);
               //alert("Congratulation on level " + level + "! You have been awarded " +  level * 50 + " coins!");
           } else {
               percentage = percentage - oldPercentage;
           }

           iterate();

       }
       });

    }

    function handleEffectiveRating() {


            bootbox.prompt("Please enter how effective your pomodoro was from 1(Very bad) to 5(Very good).", function (result) {
                if (isNaN(result) || result > 5 || result < 1) {
                    handleEffectiveRating();
                    return;
                } else {
                    postEffectiveRating(result);
                }
            });

    }


    function postEffectiveRating(effectiveRating) {



        $.ajax({
            url: "/Home/AjaxPost",
            method: "POST",
            data: { id: effectiveRating},
            success: function (data) {}
        });

        }

        function handleHappyRating() {


            bootbox.prompt("Please enter the enjoyment of this pomodoro from 1(Very bad) to 5(Very good).", function (result) {
                if (isNaN(result) || result > 5 || result < 1) {
                    handleHappyRating();
                    return;
                } else {
                    postHappyRating(result);
                }
            });

        }


        function postHappyRating(effectiveRating) {



            $.ajax({
                url: "/Home/AjaxPostHappy",
                method: "POST",
                data: { id: effectiveRating },
                success: function (data) {
                    alert("success");}
            });

        }




   //D3JS CODE BELOW - COULD NOT EASILY SEPERATE INTO OWN FILE

   var wrapper = document.getElementById('progress');
   var start = 0;


   var colours = {
       fill: '#337ab7',
       track: '#555555',
       text: '#337ab7',
       stroke: '#FFFFFF',
   }

   var radius = 150;
   var border = 15;
   var strokeSpacing = 4;
   var endAngle = Math.PI * 2;
   var formatText = d3.format('.0%');
   var boxSize = radius * 2;
   var progress = start;
   var step = percentage < start ? -0.01 : 0.01;

   //Define the circle
   var circle = d3.arc()
       .startAngle(0)
       .innerRadius(radius)
       .outerRadius(radius - border);

   //setup SVG wrapper
   var svg = d3.select(wrapper)
       .append('svg')
       .attr('width', boxSize)
       .attr('height', boxSize);

   // ADD Group container
   var g = svg.append('g')
       .attr('transform', 'translate(' + boxSize / 2 + ',' + boxSize / 2 + ')');

   //Setup track
   var track = g.append('g').attr('class', 'radial-progress');
       track.append('path')
       .attr('class', 'radial-progress__background')
       .attr('fill', colours.track)
       .attr('stroke', colours.stroke)
       .attr('stroke-width', strokeSpacing + 'px')
       .attr('d', circle.endAngle(endAngle));

   //Add colour fill
   var value = track.append('path')
       .attr('class', 'radial-progress__value')
       .attr('fill', colours.fill)
       .attr('stroke', colours.stroke)
       .attr('stroke-width', strokeSpacing + 'px');

   //Add text value
   var numberText = track.append('text')
       .style("font-size", "20px")
       .style("font-weight", "bold")
       .attr('class', 'radial-progress__text')
       .attr('fill', colours.text)
       .attr('text-anchor', 'middle')
       .attr('dy', '-50');

   var numberText2 = track.append('text')
       .style("font-size", "20px")
       .style("font-weight", "bold")
       .attr('class', 'radial-progress__text')
       .attr('fill', colours.text)
       .attr('text-anchor', 'middle')
       .attr('dy', '0');

   var numberText3 = track.append('text')
       .style("font-size", "20px")
       .style("font-weight", "bold")
       .attr('class', 'radial-progress__text')
       .attr('fill', colours.text)
       .attr('text-anchor', 'middle')
       .attr('dy', '50');


   function update(progress) {
       //update position of endAngle
       value.attr('d', circle.endAngle(endAngle * progress));
       //update text value
       numberText.text("Level : " + level);
       numberText2.text("% To level : " + formatText(progress));
       numberText3.text("XP To Level : " + experienceToLevelUp);

   }

   function iterate() {
       //call update to begin animation
       update(progress);
       if (percentage > 0) {
           //reduce count till it reaches 0
           percentage--;
           //increase progress

           progress += step;

           if (progress > 0.995) {
               progress = 0;
           }

           //Control the speed of the fill
           setTimeout(iterate, 10);
       }
   }

   iterate();


    </script>
}